{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNtnrJH7+N1uFuKOxmYquYu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ChilakaSwetha/MACHINE-LEARNING/blob/main/EXP-5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Step 1: Generate a simple synthetic dataset (classification for demonstration)\n",
        "X, y = make_classification(n_samples=1000, n_features=10, random_state=42)\n",
        "\n",
        "# Step 2: Create a DataFrame to simulate real-world dataset with possible duplicates\n",
        "df = pd.DataFrame(X, columns=[f'feature_{i}' for i in range(X.shape[1])])\n",
        "df['target'] = y\n",
        "\n",
        "# Introduce duplicates in the dataset for demonstration\n",
        "df = pd.concat([df, df.sample(200, random_state=42)], ignore_index=True)\n",
        "\n",
        "# Step 3: Remove duplicates\n",
        "df_clean = df.drop_duplicates()\n",
        "\n",
        "# Step 4: Split data into training and testing sets\n",
        "X_clean = df_clean.drop(columns='target')\n",
        "y_clean = df_clean['target']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_clean, y_clean, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 5: Implement Bias-Variance Tradeoff using Linear Regression and Decision Tree Regressor\n",
        "\n",
        "# Linear Regression model (high bias, low variance expected)\n",
        "lr_model = LinearRegression()\n",
        "\n",
        "# Decision Tree model (low bias, high variance expected)\n",
        "dt_model = DecisionTreeRegressor(random_state=42)\n",
        "\n",
        "# Perform cross-validation for both models\n",
        "lr_scores = cross_val_score(lr_model, X_train, y_train, cv=5, scoring='neg_mean_squared_error')\n",
        "dt_scores = cross_val_score(dt_model, X_train, y_train, cv=5, scoring='neg_mean_squared_error')\n",
        "\n",
        "# Bias-Variance tradeoff visualization through error scores (negative MSE)\n",
        "print(\"Linear Regression (High Bias, Low Variance):\")\n",
        "print(f\"Cross-Validation Scores (MSE): {lr_scores}\")\n",
        "print(f\"Mean Cross-Validation MSE: {-lr_scores.mean()}\")\n",
        "\n",
        "print(\"\\nDecision Tree (Low Bias, High Variance):\")\n",
        "print(f\"Cross-Validation Scores (MSE): {dt_scores}\")\n",
        "print(f\"Mean Cross-Validation MSE: {-dt_scores.mean()}\")\n",
        "\n",
        "# Step 6: Train both models on the full training set and evaluate them\n",
        "lr_model.fit(X_train, y_train)\n",
        "y_pred_lr = lr_model.predict(X_test)\n",
        "mse_lr = mean_squared_error(y_test, y_pred_lr)\n",
        "\n",
        "dt_model.fit(X_train, y_train)\n",
        "y_pred_dt = dt_model.predict(X_test)\n",
        "mse_dt = mean_squared_error(y_test, y_pred_dt)\n",
        "\n",
        "print(\"\\nPerformance on Test Set:\")\n",
        "print(f\"Linear Regression MSE: {mse_lr}\")\n",
        "print(f\"Decision Tree MSE: {mse_dt}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U0bcdZ5SdGaa",
        "outputId": "0942a6c5-8677-49f9-cc6a-15592d8e13ff"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Linear Regression (High Bias, Low Variance):\n",
            "Cross-Validation Scores (MSE): [-0.11889168 -0.11881336 -0.11439962 -0.12275112 -0.12514416]\n",
            "Mean Cross-Validation MSE: 0.11999998980233322\n",
            "\n",
            "Decision Tree (Low Bias, High Variance):\n",
            "Cross-Validation Scores (MSE): [-0.14375 -0.16875 -0.0875  -0.14375 -0.1125 ]\n",
            "Mean Cross-Validation MSE: 0.13125\n",
            "\n",
            "Performance on Test Set:\n",
            "Linear Regression MSE: 0.13163510228323996\n",
            "Decision Tree MSE: 0.16\n"
          ]
        }
      ]
    }
  ]
}